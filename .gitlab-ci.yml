include:
 - remote: 'https://source.puri.sm/Librem5/librem5-ci/raw/master/librem5-pipeline-definitions.yml'
 - remote: 'https://gitlab.freedesktop.org/freedesktop/ci-templates/-/raw/34039cd573a2df832d465bc9e4c5f543571f5241/templates/ci-fairy.yml'

stages:
 - build
 - test+docs
 - package
 - deploy

default:
  # Protect CI infra from rogue jobs
  timeout: 15 minutes
  # Allow jobs to be caneled on new commits
  interruptible: true
  # Retry on infra hickups automatically
  retry:
    max: 1
    when:
      - 'api_failure'
      - 'runner_system_failure'
      - 'scheduler_failure'
      - 'stuck_or_timeout_failure'

variables:
  # For ci-fairy
  FDO_UPSTREAM_REPO: World/Phosh/phosh
  # SCREENSHOT_IMAGE builds on DEBIAN_IMAGE so keep them in sync
  DEBIAN_IMAGE: $CI_REGISTRY/world/phosh/phosh/debian:v0.0.20220406
  SCREENSHOT_IMAGE: $CI_REGISTRY/world/phosh/phosh/screenshot:v0.0.20220406
  DEBIAN_CROSS_IMAGE: $CI_REGISTRY/world/phosh/phosh/debian-cross:v0.0.20220322.1
  XVFB_RUN: xvfb-run -a -s -noreset
  COMMON_BUILD_OPTS: -Db_coverage=true --werror -Dtools=true
  ALPINE_EDGE_DEPS: alpine-sdk callaudiod-dev elogind-dev feedbackd-dev gcr-dev git glib-dev gnome-desktop-dev
                    gtk+3.0-dev libgudev-dev libhandy1-dev gcr-dev libsecret-dev gcovr linux-pam-dev
                    meson musl-dev networkmanager networkmanager-dev ninja polkit-elogind-dev pulseaudio-dev
                    upower-dev wayland-dev wayland-protocols ttf-dejavu

.bookworm_vars: &bookworm_vars
  variables:
    DIST: bookworm
    BUILD_OPTS: -Dcallui-i18n=true -Dphoc_tests=enabled ${COMMON_BUILD_OPTS}

.build_step: &build_step
  script:
    - git submodule update --recursive
    - 'echo "Build opts: ${BUILD_OPTS}"'
    - meson ${BUILD_OPTS} . _build
    - ninja -C _build

.test_before_script: &test_before_script
  before_script:
     - export DEBIAN_FRONTEND=noninteractive
     - |
       echo 'ar_AE.UTF-8 UTF-8
       de_DE.UTF-8 UTF-8
       en_US.UTF-8 UTF-8
       ja_JP.UTF-8 UTF-8
       uk_UA.UTF-8 UTF-8
       ' > /etc/locale.gen
     - dpkg-reconfigure locales
     - echo "deb http://deb.debian.org/debian/ sid main" > /etc/apt/sources.list.d/sid.list
     - apt -y update
     - apt -y install phoc/sid

.test_step: &test_step
  script:
    - export LC_ALL=C.UTF-8
    - ${XVFB_RUN} meson test --print-errorlogs -C _build
    - ninja -C _build coverage

# Sanity checks of MR settings and commit logs
sanity:
  extends:
    - .fdo.ci-fairy
  stage: build
  script: |
    if [ -n "$CI_OPEN_MERGE_REQUESTS" ]; then
      ci-fairy check-commits --junit-xml=commit-message-junit-report.xml cifairy/main..HEAD ;
    else
      echo "Not a merge request" ;
    fi
  artifacts:
    reports:
      junit: commit-message-junit-report.xml
  only:
    variables:
      - $CI_OPEN_MERGE_REQUESTS && $PKG_ONLY != "1"

build:native-debian-bookworm:
  stage: build
  image: ${DEBIAN_IMAGE}
  <<: *bookworm_vars
  <<: *build_step
  artifacts:
    paths:
      - _build
  except:
    variables:
      - $PKG_ONLY == "1"

# Build for 32bit architecture to catch common errors
build:cross-debian-bookworm:i386:
  stage: build
  image: "${DEBIAN_CROSS_IMAGE}"
  allow_failure: true
  script:
    - git submodule update --recursive
    - 'echo "Build opts: ${COMMON_BUILD_OPTS}"'
    - /usr/share/meson/debcrossgen --arch i386 -o cross-i386.txt
    - meson ${COMMON_BUILD_OPTS} . _build --cross-file cross-i386.txt
    - ninja -C _build
  artifacts:
    paths:
      - _build
  except:
    variables:
      - $PKG_ONLY == "1"

unit-test:native-debian-bookworm:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  needs:
    - build:native-debian-bookworm
  <<: *bookworm_vars
  <<: *test_before_script
  <<: *test_step
  coverage: '/^lines:\s+([\d.]+\%)\s+/'
  artifacts:
    when: always
    paths:
      - _build
    reports:
      junit: _build/meson-logs/testlog.junit.xml
  except:
    variables:
      - $PKG_ONLY == "1"

asan-test:native-debian-bookworm:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  tags: [ asan ]
  <<: *bookworm_vars
  before_script:
     - echo "deb http://deb.debian.org/debian/ sid main" > /etc/apt/sources.list.d/sid.list
     - apt -y update
     - apt -y install phoc/sid
  script:
    - meson -Dphoc_tests=enabled -Dtools=false -Db_sanitize=address -Dbuildtype=debug _build-asan
    - ninja -C _build-asan data/gschemas.compiled
    - ${XVFB_RUN} meson test --print-errorlogs -C _build-asan --suite unit
  except:
    variables:
      - $PKG_ONLY == "1"
  allow_failure: true

screenshot:native-debian-bookworm:
  stage: test+docs
  image: ${SCREENSHOT_IMAGE}
  needs:
    - build:native-debian-bookworm
  <<: *test_before_script
  <<: *bookworm_vars
  script:
    - export LC_ALL=C.UTF-8
    # Install .po files so tests can find them
    - "DESTDIR=$PWD/_build/install meson install -C _build"
    - ${XVFB_RUN} meson test -C _build --print-errorlogs --suite screenshots
    - mv _build/tests/screenshots/* screenshots/
    - for dir in screenshots/*_*.UTF-8; do montage -mode concatenate $dir/*.png ${dir}.png; done
  artifacts:
    expose_as: 'Screenshots'
    paths:
      - screenshots/
  except:
    variables:
      - $PKG_ONLY == "1"

build-gtkdoc:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  variables:
    DIST: bookworm
    BUILD_OPTS: -Dtests=false -Dgtk_doc=true ${COMMON_BUILD_OPTS}
  script:
    - git clean -dfx
    - 'echo "Build opts: ${BUILD_OPTS}"'
    - meson ${BUILD_OPTS} . _build
    - ninja -C _build
    - tools/doc-check _build
    - mv _build/docs/html/ _reference/
  artifacts:
    paths:
      - _reference
  except:
    variables:
      - $PKG_ONLY == "1"

check-po:
  stage: test+docs
  needs:
    - build:native-debian-bookworm
  image: ${DEBIAN_IMAGE}
  before_script:
    - eatmydata apt-get -y -f install
    - eatmydata apt-get -y update
    - eatmydata apt-get -y install intltool gettext
  <<: *bookworm_vars
  script:
    - tools/check-po
  except:
    variables:
      - $PKG_ONLY == "1"

check-license-headers:
  stage: test+docs
  needs:
    - build:native-debian-bookworm
  image: ${DEBIAN_IMAGE}
  <<: *bookworm_vars
  script:
    # Checks .c and .h files begin with a license header as
    # defined in HACKING.md
    - ./tools/check-license-headers.py
  except:
    variables:
      - $PKG_ONLY == "1"

build:native-alpinelinux-edge:
  stage: build
  image: alpine:edge
  allow_failure: true
  before_script:
    - echo "https://alpine.global.ssl.fastly.net/alpine/edge/testing" >> /etc/apk/repositories
    - apk add $ALPINE_EDGE_DEPS
  artifacts:
    paths:
      - _build
  script:
    - git submodule update --recursive
    - meson --werror -Dphoc_tests=disabled . _build
    - ninja -C _build
  except:
    variables:
      - $PKG_ONLY == "1"

unit-test:native-alpinelinux-edge:
  stage: test+docs
  image: alpine:edge
  allow_failure: true
  needs:
    - build:native-alpinelinux-edge
  before_script:
    - echo "https://alpine.global.ssl.fastly.net/alpine/edge/testing" >> /etc/apk/repositories
    - apk add xvfb-run $ALPINE_EDGE_DEPS
  script:
    - export LC_ALL=C.UTF-8
    - ${XVFB_RUN} meson test -C _build --suite unit
  artifacts:
    when: always
    paths:
      - _build
    reports:
      junit: _build/meson-logs/testlog.junit.xml
  except:
    variables:
      - $PKG_ONLY == "1"

package:deb-pureos-byzantium:arm64:
  variables:
    L5_DOCKER_IMAGE: pureos/byzantium
    DEB_BUILD_PROFILES: nodoc
  extends: .l5-build-debian-package
  tags:
    - aarch64

pages:
  stage: deploy
  needs:
    - build-gtkdoc
  script:
    - mv _reference/ public/
  artifacts:
    paths:
      - public
  only:
    - main
